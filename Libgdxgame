public class FlyingSmurfs extends ApplicationAdapter {


	SpriteBatch batch;
	Texture background;
	Texture smurf;
	Texture gargamel1;
	Texture gargamel2;
	Texture gargamel3;
	float smurfX;
	float smurfY;
	int gameState = 0;
	float velocity = 0;
	float gravity = 0.5f;
	float enemyVelocity = 2;
	Random random;
	int score = 0;
	int scoreEnemy = 0;
	BitmapFont font;
	BitmapFont font2;
	Sound sound;
	Boolean flag = true;

	Circle smurfCircle;

	ShapeRenderer shapeRenderer;

    FlyingSmurfs game;

    
    


    int numberOfEnemies = 4;
	float [] enemyX  = new float[numberOfEnemies];
	float [] enemyOffSet = new float[numberOfEnemies];
	float [] enemyOffSet2 = new float[numberOfEnemies];
	float [] enemyOffSet3 = new float[numberOfEnemies];

	float distance = 0;

	Circle[] enemyCircles;
	Circle[] enemyCircles2;
	Circle[] enemyCircles3;



	
	@Override
	public void create () {


		batch = new SpriteBatch();
		background = new Texture("background.png");
		smurf = new Texture("smurf.png");
		gargamel1 = new Texture("gargamel.png");
		gargamel2 = new Texture("gargamel.png");
		gargamel3 = new Texture("gargamel.png");
		distance = Gdx.graphics.getWidth() / 2;
		random = new Random();

		smurfX = Gdx.graphics.getWidth() / 2 - smurf.getHeight() / 2;
		smurfY = Gdx.graphics.getHeight() / 3;

		shapeRenderer = new ShapeRenderer();

		smurfCircle = new Circle();
		enemyCircles = new Circle[numberOfEnemies];
		enemyCircles2 = new Circle[numberOfEnemies];
		enemyCircles3 = new Circle[numberOfEnemies];

		font = new BitmapFont();
		font.setColor(Color.WHITE);
		font.getData().setScale(5);

		font2 = new BitmapFont();
		font2.setColor(Color.WHITE);
		font2.getData().setScale(8);


		for (int i = 0; i<numberOfEnemies; i++){

			enemyOffSet[i] = (random.nextFloat() - 0.5f) * (Gdx.graphics.getHeight() - 200);
			enemyOffSet2[i] = (random.nextFloat() - 0.5f) * (Gdx.graphics.getHeight() - 200);
			enemyOffSet3[i] = (random.nextFloat() - 0.5f) * (Gdx.graphics.getHeight() - 200);

			enemyX[i] = Gdx.graphics.getWidth() - gargamel1.getWidth() / 2 + i * distance;

			enemyCircles[i] = new Circle();
			enemyCircles2[i] = new Circle();
			enemyCircles3[i] = new Circle();
			sound = Gdx.audio.newSound(Gdx.files.internal("lose.ogg"));


		}


	}

	@Override
	public void render () {
		batch.begin();
		batch.draw(background,0,0,Gdx.graphics.getWidth(),Gdx.graphics.getHeight());


		if (gameState==1) {
			flag = true;

			if (enemyX[scoreEnemy] < Gdx.graphics.getWidth() / 2 - smurf.getHeight() / 2) {
				score++;

				if(scoreEnemy < numberOfEnemies - 1) {

					scoreEnemy++;
				}else {
					scoreEnemy = 0;
				}
			}



			if (Gdx.input.justTouched()) {
				velocity = -13;

			}



			for (int i = 0; i < numberOfEnemies; i++) {

				if (enemyX[i] < Gdx.graphics.getWidth() / 18) {
					enemyX[i] = enemyX[i] + numberOfEnemies * distance;

					enemyOffSet[i] = (random.nextFloat() - 0.5f) * (Gdx.graphics.getHeight() - 200);
					enemyOffSet2[i] = (random.nextFloat() - 0.5f) * (Gdx.graphics.getHeight() - 200);
					enemyOffSet3[i] = (random.nextFloat() - 0.5f) * (Gdx.graphics.getHeight() - 200);

				}else {
					enemyX[i] = enemyX[i] - enemyVelocity;
				}

				enemyX[i] = enemyX[i] - enemyVelocity;

				batch.draw(gargamel1,enemyX[i],Gdx.graphics.getHeight()/2 + enemyOffSet[i],Gdx.graphics.getWidth() / 18,Gdx.graphics.getHeight() / 12);
				batch.draw(gargamel2,enemyX[i],Gdx.graphics.getHeight()/2 + enemyOffSet2[i],Gdx.graphics.getWidth() / 18,Gdx.graphics.getHeight() / 12);
				batch.draw(gargamel3,enemyX[i],Gdx.graphics.getHeight()/2 + enemyOffSet3[i],Gdx.graphics.getWidth() / 18,Gdx.graphics.getHeight() / 12);


				enemyCircles[i] = new Circle(enemyX[i] + Gdx.graphics.getWidth() / 36, + Gdx.graphics.getHeight()/2 + enemyOffSet[i] + Gdx.graphics.getHeight() / 24,Gdx.graphics.getWidth() / 36);
				enemyCircles2[i] = new Circle(enemyX[i] + Gdx.graphics.getWidth() / 36, + Gdx.graphics.getHeight()/2 + enemyOffSet[i] + Gdx.graphics.getHeight() / 24,Gdx.graphics.getWidth() / 36);
				enemyCircles3[i] = new Circle(enemyX[i] + Gdx.graphics.getWidth() / 36, + Gdx.graphics.getHeight()/2 + enemyOffSet[i] + Gdx.graphics.getHeight() / 24,Gdx.graphics.getWidth() / 36);


			}















			if (smurfY > 0) {
				velocity = velocity + gravity;
				smurfY = smurfY - velocity;
			}else {
				gameState = 2;
			}


		} else if (gameState == 0){
			if (Gdx.input.justTouched()) {
				gameState = 1;
			}

		} else if (gameState == 2){

			font2.draw(batch,"Game Over! Tap To Play Again!",100,Gdx.graphics.getHeight()/2);
			if (flag) {
				sound.play();
				flag = false;
			}


			if (Gdx.input.justTouched()){
				gameState = 1;

				smurfY = Gdx.graphics.getHeight() / 3;

				for (int i = 0; i<numberOfEnemies; i++){

					enemyOffSet[i] = (random.nextFloat() - 0.5f) * (Gdx.graphics.getHeight() - 200);
					enemyOffSet2[i] = (random.nextFloat() - 0.5f) * (Gdx.graphics.getHeight() - 200);
					enemyOffSet3[i] = (random.nextFloat() - 0.5f) * (Gdx.graphics.getHeight() - 200);

					enemyX[i] = Gdx.graphics.getWidth() - gargamel1.getWidth() / 2 + i * distance;

					enemyCircles[i] = new Circle();
					enemyCircles2[i] = new Circle();
					enemyCircles3[i] = new Circle();


				}

				velocity = 0;
				scoreEnemy = 0;
				score = 0;


			}
		}

		batch.draw(smurf, smurfX, smurfY, Gdx.graphics.getWidth() / 18, Gdx.graphics.getHeight() / 12);

		font.draw(batch,String.valueOf(score), 100,200);


		batch.end();

		smurfCircle.set(smurfX + Gdx.graphics.getWidth() / 36 ,smurfY + Gdx.graphics.getHeight() / 24,Gdx.graphics.getWidth() / 36 );



		//shapeRenderer.begin(ShapeRenderer.ShapeType.Filled);
		//shapeRenderer.setColor(Color.BLACK);
		//shapeRenderer.circle(smurfCircle.x,smurfCircle.y,smurfCircle.radius);



		for (int i = 0; i < numberOfEnemies; i++){


			//shapeRenderer.circle(enemyX[i] + Gdx.graphics.getWidth() / 36, + Gdx.graphics.getHeight()/2 + enemyOffSet[i] + Gdx.graphics.getHeight() / 24,Gdx.graphics.getWidth() / 36);
			//shapeRenderer.circle(enemyX[i] + Gdx.graphics.getWidth() / 36, + Gdx.graphics.getHeight()/2 + enemyOffSet2[i] + Gdx.graphics.getHeight() / 24,Gdx.graphics.getWidth() / 36);
			//shapeRenderer.circle(enemyX[i] + Gdx.graphics.getWidth() / 36, + Gdx.graphics.getHeight()/2 + enemyOffSet3[i] + Gdx.graphics.getHeight() / 24,Gdx.graphics.getWidth() / 36);

			if (Intersector.overlaps(smurfCircle,enemyCircles[i]) || Intersector.overlaps(smurfCircle,enemyCircles2[i]) || Intersector.overlaps(smurfCircle,enemyCircles3[i])) {



				gameState = 2;

			}


		}

		//shapeRenderer.end();




	}
	
	@Override
	public void dispose () {

	}
}
